{"version":3,"sources":["../src/unit.test.js"],"names":["describe","test","expect","Object","a","toBe","b","Boolean","String","Number","NaN","Infinity","Array","Map","WeakMap","Set","WeakSet","Car","Porsche","undefined","console","name","fn","Function","value","propName","props","validator","v","Validator","toThrow","Error"],"mappings":"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","sourcesContent":["import {\n  isType,\n  isPrimitive,\n  isConstructor,\n  isValidType,\n  isNormalFunction,\n} from './index';\n\ndescribe('test type by constructor', () => {\n  test('should return true for basic JS types', () => {\n    expect(isType(Object)({ a: 1 })).toBe(true);\n    expect(isType(Object)(new Object({ b: 2 }))).toBe(true);\n\n    expect(isType(Boolean)(true)).toBe(true);\n    expect(isType(Boolean)(false)).toBe(true);\n\n    expect(isType(String)('xs')).toBe(true);\n    expect(isType(String)('')).toBe(true);\n    expect(isType(String)('')).toBe(true);\n    expect(isType(String)(``)).toBe(true);\n\n    expect(isType(Number)(1)).toBe(true);\n    expect(isType(Number)(NaN)).toBe(true);\n    expect(isType(Number)(Infinity)).toBe(true);\n    expect(isType(Number)(0.34)).toBe(true);\n    expect(isType(Number)(3.1e12)).toBe(true);\n\n    expect(isType(Array)([1, 2])).toBe(true);\n    expect(isType(Array)(new Array(1, 2))).toBe(true);\n\n    expect(isType(Map)(new Map())).toBe(true);\n    expect(isType(WeakMap)(new WeakMap())).toBe(true);\n    expect(isType(Set)(new Set())).toBe(true);\n    expect(isType(WeakSet)(new WeakSet())).toBe(true);\n\n    // not yet supported in jsdom\n    // expect(isType(BigInt)(new BigInt(2))).toBe(true);\n    // expect(isType(BigInt)(2n)).toBe(true);\n  });\n\n  test('should return false is it not a type', () => {\n    expect(isType(Object)('{ a: 1 }')).toBe(false);\n\n    expect(isType(Boolean)('true')).toBe(false);\n\n    expect(isType(String)(1)).toBe(false);\n    expect(isType(String)([])).toBe(false);\n    expect(isType(String)({})).toBe(false);\n    expect(isType(String)()).toBe(false);\n\n    expect(isType(Number)('1')).toBe(false);\n  });\n\n  test('should recognize instance of classes', () => {\n    class Car {}\n    expect(isType(Car)(new Car())).toBe(true);\n\n    class Porsche extends Car {}\n\n    expect(isType(Car)(new Porsche())).toBe(false);\n\n    expect(isType(Object)(new Array())).toBe(false);\n  });\n});\n\ndescribe('isPrimitive', () => {\n  test(' should recognize primitive types', () => {\n    expect(isPrimitive('hola')).toBe(true);\n    expect(isPrimitive(1)).toBe(true);\n    expect(isPrimitive(false)).toBe(true);\n    expect(isPrimitive(NaN)).toBe(true);\n\n    expect(isPrimitive(undefined)).toBe(true);\n    expect(isPrimitive(null)).toBe(true);\n\n    expect(isPrimitive({})).toBe(false);\n    expect(isPrimitive(() => {})).toBe(false);\n    expect(isPrimitive([])).toBe(false);\n  });\n});\n\ndescribe('isConstructor', () => {\n  test('should detect if a value can be instantiated with new', () => {\n    expect(isConstructor(Object)).toBe(true);\n    expect(isConstructor(Array)).toBe(true);\n    expect(isConstructor(console)).toBe(false);\n    expect(isConstructor(12)).toBe(false);\n    expect(isConstructor(() => {})).toBe(false);\n    expect(isConstructor(function name() {})).toBe(false);\n    const fn = () => {};\n    expect(isConstructor(fn)).toBe(false);\n  });\n});\n\ndescribe('is normal function', () => {\n  test('should detect if a function is anonymous or his name starts with lowercase (not a class)', () => {\n    expect(isNormalFunction(Object)).toBe(false);\n    expect(isNormalFunction(() => {})).toBe(true);\n    expect(isNormalFunction(function name() {})).toBe(true);\n    expect(isNormalFunction(function() {})).toBe(true);\n    expect(isNormalFunction('asdasd')).toBe(false);\n    expect(isNormalFunction(1)).toBe(false);\n  });\n});\n\ndescribe('is Valid type', () => {\n  test('should work for constructors', () => {\n    expect(isValidType(String, 'a')).toBe(true);\n    expect(isValidType(String, 1)).toBe(false);\n  });\n  test('should work for primitives', () => {\n    expect(isValidType('a', 'a')).toBe(true);\n    expect(isValidType('a', `a${''}`)).toBe(true);\n\n    expect(isValidType('a', 'b')).toBe(false);\n\n    expect(isValidType(1.0, 1)).toBe(true);\n    expect(isValidType(2, 1)).toBe(false);\n\n    expect(isValidType(true, true)).toBe(true);\n    expect(isValidType(undefined, undefined)).toBe(true);\n    expect(isValidType(null, null)).toBe(true);\n  });\n  test('should work for enums of constructors', () => {\n    expect(isValidType([String, Function], 'a')).toBe(true);\n    expect(isValidType([String, Function], 1)).toBe(false);\n    expect(isValidType([String, Object], [])).toBe(false);\n  });\n  test('should work for enums of primitives', () => {\n    expect(isValidType(['b', 'a'], 'a')).toBe(true);\n    expect(isValidType(['b', 'a'], 'c')).toBe(false);\n    expect(isValidType([undefined, String], 'c')).toBe(true);\n    expect(isValidType([undefined, String], undefined)).toBe(true);\n    expect(isValidType([undefined, Number], 'c')).toBe(false);\n  });\n  test('should work for shapes', () => {\n    expect(isValidType({ a: Number }, { a: 1 })).toBe(true);\n    expect(isValidType({ a: Number }, { a: 'a' })).toBe(false);\n\n    expect(isValidType({ a: [Number, String] }, { a: 'a' })).toBe(true);\n    expect(\n      isValidType(\n        {\n          a: [Number, String],\n          b: [undefined, 'b'],\n        },\n        { a: 'a' },\n      ),\n    ).toBe(true);\n    expect(\n      isValidType(\n        {\n          a: [Number, String],\n          b: [undefined, 'b'],\n        },\n        { a: 'a', b: 'b' },\n      ),\n    ).toBe(true);\n    expect(\n      isValidType(\n        {\n          a: [Number, String],\n          b: [undefined, 'b'],\n        },\n        { a: 'a', b: 'c' },\n      ),\n    ).toBe(false);\n  });\n  test('should work for custom validators functions', () => {\n    expect(isValidType(value => value > 5, 6)).toBe(true);\n    expect(isValidType(value => value === 5, 6)).toBe(false);\n\n    expect(\n      isValidType(\n        (value, propName, props) => propName === value,\n        6,\n        { a: 'a' },\n        'a',\n      ),\n    ).toBe(false);\n  });\n  test('should use a camelCase function or anonymous', () => {\n    function validator(v) {\n      return true;\n    }\n    function Validator(v) {\n      return true;\n    }\n    expect(isValidType(validator, 3)).toBe(true);\n    expect(isValidType(Validator, 3)).toBe(false);\n  });\n\n  test('should throw', () => {\n    expect(() => {\n      isValidType(() => {\n        throw 'asd';\n      }, 6);\n    }).toThrow();\n  });\n  test('should throw custom error', () => {\n    expect(() => {\n      isValidType(value => {\n        if (value > 5) {\n          throw 'must be greater than 5';\n        }\n      }, 6);\n    }).toThrow('must be greater than 5');\n  });\n\n  test('should throw custom error', () => {\n    expect(() => {\n      isValidType(value => {\n        if (value > 5) {\n          throw new Error('must be greater than 5');\n        }\n      }, 6);\n    }).toThrow('must be greater than 5');\n  });\n});\n"],"file":"unit.test.js"}