{"version":3,"sources":["../src/unit.test.js"],"names":["describe","test","expect","RegExp","toBe","Object","a","b","Boolean","String","Number","NaN","Infinity","Array","Map","WeakMap","Set","WeakSet","Car","Porsche","undefined","console","name","fn","Function","value","propName","props","validator","v","Validator","toThrow","Error"],"mappings":"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","sourcesContent":["import {\n  isType,\n  isPrimitive,\n  isConstructor,\n  isValidType,\n  isNormalFunction,\n} from './index';\n\ndescribe('test type by constructor', () => {\n  test('should return true for basic JS types', () => {\n    expect(isType(RegExp)(/regexp/)).toBe(true);\n    expect(isType(RegExp)(new RegExp('foo'))).toBe(true);\n\n    expect(isType(Object)({ a: 1 })).toBe(true);\n    expect(isType(Object)(new Object({ b: 2 }))).toBe(true);\n\n    expect(isType(Boolean)(true)).toBe(true);\n    expect(isType(Boolean)(false)).toBe(true);\n\n    expect(isType(String)('xs')).toBe(true);\n    expect(isType(String)('')).toBe(true);\n    expect(isType(String)('')).toBe(true);\n    expect(isType(String)(``)).toBe(true);\n\n    expect(isType(Number)(1)).toBe(true);\n    expect(isType(Number)(NaN)).toBe(true);\n    expect(isType(Number)(Infinity)).toBe(true);\n    expect(isType(Number)(0.34)).toBe(true);\n    expect(isType(Number)(3.1e12)).toBe(true);\n\n    expect(isType(Array)([1, 2])).toBe(true);\n    expect(isType(Array)(new Array(1, 2))).toBe(true);\n\n    expect(isType(Map)(new Map())).toBe(true);\n    expect(isType(WeakMap)(new WeakMap())).toBe(true);\n    expect(isType(Set)(new Set())).toBe(true);\n    expect(isType(WeakSet)(new WeakSet())).toBe(true);\n\n    // not yet supported in jsdom\n    // expect(isType(BigInt)(new BigInt(2))).toBe(true);\n    // expect(isType(BigInt)(2n)).toBe(true);\n  });\n\n  test('should return false is it not a type', () => {\n    expect(isType(Object)('{ a: 1 }')).toBe(false);\n\n    expect(isType(Boolean)('true')).toBe(false);\n\n    expect(isType(String)(1)).toBe(false);\n    expect(isType(String)([])).toBe(false);\n    expect(isType(String)({})).toBe(false);\n    expect(isType(String)()).toBe(false);\n\n    expect(isType(Number)('1')).toBe(false);\n  });\n\n  test('should recognize instance of classes', () => {\n    class Car {}\n    expect(isType(Car)(new Car())).toBe(true);\n\n    class Porsche extends Car {}\n\n    expect(isType(Car)(new Porsche())).toBe(false);\n\n    expect(isType(Object)(new Array())).toBe(false);\n  });\n});\n\ndescribe('isPrimitive', () => {\n  test(' should recognize primitive types', () => {\n    expect(isPrimitive('hola')).toBe(true);\n    expect(isPrimitive(1)).toBe(true);\n    expect(isPrimitive(false)).toBe(true);\n    expect(isPrimitive(NaN)).toBe(true);\n\n    expect(isPrimitive(undefined)).toBe(true);\n    expect(isPrimitive(null)).toBe(true);\n\n    expect(isPrimitive({})).toBe(false);\n    expect(isPrimitive(/regex/)).toBe(false);\n    expect(isPrimitive(() => {})).toBe(false);\n    expect(isPrimitive([])).toBe(false);\n  });\n});\n\ndescribe('isConstructor', () => {\n  test('should detect if a value can be instantiated with new', () => {\n    expect(isConstructor(Object)).toBe(true);\n    expect(isConstructor(Array)).toBe(true);\n    expect(isConstructor(console)).toBe(false);\n    expect(isConstructor(12)).toBe(false);\n    expect(isConstructor(() => {})).toBe(false);\n    expect(isConstructor(function name() {})).toBe(false);\n    const fn = () => {};\n    expect(isConstructor(fn)).toBe(false);\n  });\n});\n\ndescribe('is normal function', () => {\n  test('should detect if a function is anonymous or his name starts with lowercase (not a class)', () => {\n    expect(isNormalFunction(Object)).toBe(false);\n    expect(isNormalFunction(() => {})).toBe(true);\n    expect(isNormalFunction(function name() {})).toBe(true);\n    expect(isNormalFunction(function() {})).toBe(true);\n    expect(isNormalFunction('asdasd')).toBe(false);\n    expect(isNormalFunction(1)).toBe(false);\n  });\n});\n\ndescribe('is Valid type', () => {\n  test('should check RegExp', () => {\n    expect(isValidType(/.ola/, 'hola')).toBe(true);\n    expect(isValidType(/.ola/, 'sola')).toBe(true);\n    expect(isValidType(/.ola/, 'ola')).toBe(false);\n\n  })\n\n  test('should work for constructors', () => {\n    expect(isValidType(String, 'a')).toBe(true);\n    expect(isValidType(String, 1)).toBe(false);\n    expect(isValidType(RegExp, /12/)).toBe(true);\n  });\n  test('should work for primitives', () => {\n    expect(isValidType('a', 'a')).toBe(true);\n    expect(isValidType('a', `a${''}`)).toBe(true);\n\n    expect(isValidType('a', 'b')).toBe(false);\n\n    expect(isValidType(1.0, 1)).toBe(true);\n    expect(isValidType(2, 1)).toBe(false);\n\n    expect(isValidType(true, true)).toBe(true);\n    expect(isValidType(undefined, undefined)).toBe(true);\n    expect(isValidType(null, null)).toBe(true);\n  });\n  test('should work for enums of constructors', () => {\n    expect(isValidType([String, Function], 'a')).toBe(true);\n    expect(isValidType([String, Function], 1)).toBe(false);\n    expect(isValidType([String, Object], [])).toBe(false);\n  });\n  test('should work for enums of primitives', () => {\n    expect(isValidType(['b', 'a'], 'a')).toBe(true);\n    expect(isValidType(['b', 'a'], 'c')).toBe(false);\n    expect(isValidType([undefined, String], 'c')).toBe(true);\n    expect(isValidType([undefined, String], undefined)).toBe(true);\n    expect(isValidType([undefined, Number], 'c')).toBe(false);\n  });\n  test('should work for shapes', () => {\n    expect(isValidType({ a: Number }, { a: 1 })).toBe(true);\n    expect(isValidType({ a: Number }, { a: 'a' })).toBe(false);\n\n    expect(isValidType({ a: [Number, String] }, { a: 'a' })).toBe(true);\n    expect(\n      isValidType(\n        {\n          a: [Number, String],\n          b: [undefined, 'b'],\n        },\n        { a: 'a' },\n      ),\n    ).toBe(true);\n    expect(\n      isValidType(\n        {\n          a: [Number, String],\n          b: [undefined, 'b'],\n        },\n        { a: 'a', b: 'b' },\n      ),\n    ).toBe(true);\n    expect(\n      isValidType(\n        {\n          a: [Number, String],\n          b: [undefined, 'b'],\n        },\n        { a: 'a', b: 'c' },\n      ),\n    ).toBe(false);\n  });\n  test('should work for custom validators functions', () => {\n    expect(isValidType(value => value > 5, 6)).toBe(true);\n    expect(isValidType(value => value === 5, 6)).toBe(false);\n\n    expect(\n      isValidType(\n        (value, propName, props) => propName === value,\n        6,\n        { a: 'a' },\n        'a',\n      ),\n    ).toBe(false);\n  });\n  test('should use a camelCase function or anonymous', () => {\n    function validator(v) {\n      return true;\n    }\n    function Validator(v) {\n      return true;\n    }\n    expect(isValidType(validator, 3)).toBe(true);\n    expect(isValidType(Validator, 3)).toBe(false);\n  });\n\n  test('should throw', () => {\n    expect(() => {\n      isValidType(() => {\n        throw 'asd';\n      }, 6);\n    }).toThrow();\n  });\n  test('should throw custom message', () => {\n    expect(() => {\n      isValidType(value => {\n        if (value > 5) {\n          throw 'must be greater than 5';\n        }\n      }, 6);\n    }).toThrow('must be greater than 5');\n  });\n\n  test('should throw custom Error', () => {\n    expect(() => {\n      isValidType(value => {\n        if (value > 5) {\n          throw new Error('must be greater than 5');\n        }\n      }, 6);\n    }).toThrow('must be greater than 5');\n  });\n});\n\n\n// describe('test RegEx', () => {\n//   test('should ', () => {\n//       let regex = new RegExp(eval('/.la/'));\n//       expect('hola'.match(regex)).toBeTruthy();\n//       console.log(regex.test('ola'))\n//   })\n\n\n// })"],"file":"unit.test.js"}