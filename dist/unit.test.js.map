{"version":3,"sources":["../src/unit.test.js"],"names":["describe","test","expect","Object","a","toBe","b","Boolean","String","Number","NaN","Infinity","Array","Map","WeakMap","Set","WeakSet","Car","Porsche","undefined","console"],"mappings":"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","sourcesContent":["import { isType, isPrimitive, isConstructor } from './index';\n\ndescribe('test type by constructor', () => {\n  test('should return true for basic JS types', () => {\n    expect(isType(Object)({ a: 1 })).toBe(true);\n    expect(isType(Object)(new Object({ b: 2 }))).toBe(true);\n\n    expect(isType(Boolean)(true)).toBe(true);\n    expect(isType(Boolean)(false)).toBe(true);\n\n    expect(isType(String)('xs')).toBe(true);\n    expect(isType(String)('')).toBe(true);\n    expect(isType(String)('')).toBe(true);\n    expect(isType(String)(``)).toBe(true);\n\n    expect(isType(Number)(1)).toBe(true);\n    expect(isType(Number)(NaN)).toBe(true);\n    expect(isType(Number)(Infinity)).toBe(true);\n    expect(isType(Number)(0.34)).toBe(true);\n    expect(isType(Number)(3.1e12)).toBe(true);\n\n    expect(isType(Array)([1, 2])).toBe(true);\n    expect(isType(Array)(new Array(1, 2))).toBe(true);\n\n    expect(isType(Map)(new Map())).toBe(true);\n    expect(isType(WeakMap)(new WeakMap())).toBe(true);\n    expect(isType(Set)(new Set())).toBe(true);\n    expect(isType(WeakSet)(new WeakSet())).toBe(true);\n\n    // not yet supported in jsdom\n    // expect(isType(BigInt)(new BigInt(2))).toBe(true);\n    // expect(isType(BigInt)(2n)).toBe(true);\n  });\n\n  test('should return false is it not a type', () => {\n\n    expect(isType(Object)('{ a: 1 }')).toBe(false);\n\n    expect(isType(Boolean)('true')).toBe(false);\n\n    expect(isType(String)(1)).toBe(false);\n    expect(isType(String)([])).toBe(false);\n    expect(isType(String)({})).toBe(false);\n    expect(isType(String)()).toBe(false);\n\n    expect(isType(Number)('1')).toBe(false);\n  });\n\n  test('should recognize instance of classes', () => {\n\n    class Car {};\n    expect(isType(Car)(new Car())).toBe(true);\n\n\n    class Porsche extends Car {}\n\n    expect(isType(Car)(new Porsche())).toBe(false);\n\n\n    expect(isType(Object)(new Array())).toBe(false);\n\n  })\n\n});\n\n\n\ndescribe('isPrimitive', () => {\n\n\n  test(' should recognize primitive types', () => {\n      expect(isPrimitive('hola')).toBe(true);\n      expect(isPrimitive(1)).toBe(true);\n      expect(isPrimitive(false)).toBe(true);\n      expect(isPrimitive(NaN)).toBe(true);\n\n      expect(isPrimitive(undefined)).toBe(true);\n      expect(isPrimitive(null)).toBe(true);\n\n      expect(isPrimitive({})).toBe(false);\n      expect(isPrimitive([])).toBe(false);\n  })\n\n});\n\n\ndescribe('isConstructor',()=> {\n  test('should detect if a value can be instantiated with new', () => {\n\n    expect(isConstructor(Object)).toBe(true);\n    expect(isConstructor(Array)).toBe(true);\n    expect(isConstructor(console)).toBe(false);\n    expect(isConstructor(12)).toBe(false);\n\n  })\n\n});"],"file":"unit.test.js"}