{"version":3,"sources":["../src/index.jsx"],"names":["isType","type","val","undefined","includes","constructor","isInstanceOf","isNormalFunction","f","name","toLowerCase","isConstructor","err","isPrimitive","value","Object","checkShape","shape","keys","every","key","isValidType","checkRegExp","regExp","test","props","propName","RegExp","Array","some","_type","testOrWarn","error","console","log","stringRegExp","isRegExp","notIsRegExp","typedComponent","types","defaults","Component","propsToTest","filter","regExpToCheck","untestedReceivedProps","forEach","testedProps","_props"],"mappings":"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","sourcesContent":["import React from 'react';\n\nexport const isType = type => val =>\n  ![undefined, null].includes(val) && val.constructor === type;\n\nexport const isInstanceOf = type => val =>\n  val instanceof type\n\n\n\nexport const isNormalFunction = f =>\n  typeof f === 'function' &&\n  (!f.name || f.name[0] === f.name[0].toLowerCase());\n\nexport function isConstructor(f) {\n  // detect is a normal function (anonymous or its name starts with lowercase)\n  if (isNormalFunction(f)) return false;\n\n  try {\n    new f();\n  } catch (err) {\n    return false;\n  }\n  return true;\n}\n\nexport const isPrimitive = value => !(value instanceof Object);\n// export const isPrimitive = value => Object(value) !== value;\n\nexport const checkShape = (shape, value) =>\n  Object.keys(shape).every(key =>\n    isValidType(shape[key], value[key]),\n  );\n\nconst checkRegExp = (regExp, value) => regExp.test(value);\n\nexport const isValidType = (type, value, props, propName) => {\n  if (isType(RegExp)(type)) {\n    return checkRegExp(type, value);\n  } else if (isPrimitive(type)) {\n    return value === type;\n  } else if (isNormalFunction(type)) {\n    return type(value, props, propName);\n  } else if (isConstructor(type)) {\n    return isType(type)(value);\n  } else if (isType(Array)(type)) {\n    return type.some(_type => isValidType(_type, value));\n  } else if (isType(Object)(type) && isType(Object)(value)) {\n    return checkShape(type, value);\n  }\n  return false;\n};\n\nconst testOrWarn = (type, value, props, propName) => {\n  try {\n    isValidType(type, value, props, propName) ||\n      error(\n        `prop ${propName} with value ${value} do not match type ${type}`,\n      );\n  } catch (error) {\n    error(error);\n  }\n};\n\nconst error = (...args) =>\n  {\n    console.error(...args);\n    console.log(...args);\n  }\n\n// const stringToRegExp = string => new RegExp(eval(string));\n\nconst stringRegExp = /^\\/.+\\/$/;\nconst isRegExp = value  =>  value && stringRegExp.test(value);\nconst notIsRegExp = value => !isRegExp(value);\nconst typedComponent = (\n  types = {},\n  defaults = {},\n) => Component => props => {\n  const propsToTest = Object.keys(types).filter(notIsRegExp);\n  const regExpToCheck = Object.keys(types).filter(isRegExp);\n  const untestedReceivedProps = Object.keys(props).filter(\n    propName => !propsToTest.includes(propName),\n  );\n\n// console.log('propsToTest', propsToTest);\n// console.log('regExpToCheck', regExpToCheck);\n// console.log('untestedReceivedProps', untestedReceivedProps)\n\n  propsToTest.forEach(propName =>\n    testOrWarn(\n      types[propName],\n      props[propName],\n      props,\n      propName,\n    ),\n  );\n\n  const testedProps = propsToTest.filter(\n    ([propName]) => !isRegExp(propName),\n  );\n  // const regExpPropNameArray = allPropNameToCheck\n  // const allPropNameToCheck = Object.keys(types);\n\n  // const regExpPropNameArray = allPropNameToCheck.filter(\n  //   propName => stringRegExp.test(propName),\n  // );\n\n  // const stringPropNameArray = allPropNameToCheck.filter(\n  //   propName => !stringRegExp.test(propName),\n  // );\n\n  //  CHECK PROP NAME WITH REGEXP\n  //\n  // const propsToCheckByRegExp = Object.keys(props).filter(\n  //   propName => !stringPropNameArray.includes(propName),\n  // );\n\n  // for (const regExpPropName of regExpPropNameArray) {\n  //   const regExp = stringToRegExp(types[regExpPropName]);\n  //   for (const propName of propsToCheckByRegExp) {\n  //     if(regExp.test(propName)) {\n  //       const value = props[propName];\n  //       const type = types[regExpPropName];\n\n  //       try {\n  //         isValidType(type, value, props, propName) ||\n  //           error(\n  //             `prop ${propName} with value ${value} do not match type ${type}`,\n  //           );\n  //       } catch (error) {\n  //         error(error);\n  //       }\n  //     }\n  //   }\n  // }\n\n  // for (const propName of stringPropNameArray) {\n  //   const value = props[propName];\n  //   const type = types[propName];\n  //   if (typeof value === 'undefined') {\n  //     continue;\n  //   }\n\n  //   try {\n  //     isValidType(type, value, props, propName) ||\n  //       error(\n  //         `prop ${propName} with value ${value} do not match type ${type}`,\n  //       );\n  //   } catch (error) {\n  //     error(error);\n  //   }\n  // }\n\n  // for (const prop in types) {\n  //   if (types.hasOwnProperty(prop)) {\n\n  //   }\n  // }\n  const _props = {\n    ...defaults,\n    ...props,\n  };\n\n  return <Component {..._props} />;\n};\n\nexport default typedComponent;\n"],"file":"index.js"}