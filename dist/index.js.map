{"version":3,"sources":["../src/index.jsx"],"names":["isType","type","val","undefined","includes","constructor","isNormalFunction","f","name","toLowerCase","isConstructor","err","isPrimitive","value","Object","checkShape","shape","keys","every","key","isValidType","props","propName","Array","some","_type","warnInvalidPropType","message","console","error","typedComponent","types","defaults","Component","prop","hasOwnProperty","_props"],"mappings":"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","sourcesContent":["import React from 'react';\n\nexport const isType = type => val =>\n  ![undefined, null].includes(val) && val.constructor === type;\n\nexport const isNormalFunction = f => typeof f === 'function' &&\n  (!f.name || f.name[0] === f.name[0].toLowerCase());\n\nexport function isConstructor(f) {\n  // detect is a normal function (anonymous or its name starts with lowercase)\n  if (isNormalFunction(f)) return false;\n\n  try {\n    new f();\n  } catch (err) {\n    return false;\n  }\n  return true;\n}\n\nexport const isPrimitive = value => Object(value) !== value;\n\nexport const checkShape = (shape, value) =>\n  Object.keys(shape).every(key => isValidType(shape[key], value[key]));\n\nexport const isValidType = (type, value, props, propName) => {\n  if (isPrimitive(type)) {\n    return value === type;\n  } else if (isNormalFunction(type)) {\n    return type(value, props, propName);\n  } else if (isConstructor(type)) {\n    return isType(type)(value);\n  } else if (isType(Array)(type)) {\n    return type.some(_type => isValidType(_type, value));\n  } else if (isType(Object)(type) && isType(Object)(value)) {\n    return checkShape(type, value);\n  }\n  return false;\n};\n\n\n\nconst warnInvalidPropType = (message, type, value) => console.error(message, type, value)\n\nconst typedComponent = (types = {}, defaults = {}) => Component => props => {\n  for (const prop in types) {\n    if (types.hasOwnProperty(prop)) {\n      const value = props[prop];\n      const type = types[prop];\n      if (typeof value === 'undefined') {\n        continue;\n      }\n\n      try {\n        isValidType(type, value, props, prop) ||\n          warnInvalidPropType('invalid type', type, value);\n      } catch (error) {\n          warnInvalidPropType(error, type, value);\n\n      }\n    }\n  }\n  const _props = { ...defaults, ...props };\n\n  return <Component {..._props} />;\n};\n\nexport default typedComponent;\n"],"file":"index.js"}